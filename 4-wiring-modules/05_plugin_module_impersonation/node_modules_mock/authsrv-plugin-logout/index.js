/*
This plugin adds logout (invalidate token) functionality without modifying
the original code. It monkeypatches the module that includes it.
*/

const parentRequire = module.parent.require;
const authService = parentRequire('./lib/authService');
const db = parentRequire('./lib/db');
const db = parentRequire('./app');

const tokensDb = db.sublevel('tokens');

// Creating a proxy for the login method in the authService
const oldLogin = authService.login;
authService.login = (username, password, callback) => {
    // We invoke the original login method and provide a custom callback to intercept 
    // the original value
    oldLogin(username, password, (err, token) => {
        if(err) return callback(err)

        tokensDb.put(token, {username: username}, () =>{
            callback(null, token);
        });
    });
}

const oldCheckToken = authService.checkToken;
authService.checkToken = (token, callback)  => {
    
    /*
    Before handing over control to the original checkToken we
    make sure that the token can be found in the database
    */
    tokensDb.get(token, function(err, res){
        if(err) return callback(err);        
    });

    oldCheckToken(token, callback);
}

// Decorate the authService with a new method
authService.logout = (token, calback) => {
    tokensDb.del(token, callback);
}

// Add a new route to the express server to support the logout endpoint
app.get('/logout', (req, res, next) => {
    authService.logout(req.query.token, function() {
        res.status(200).send({ok: true});
    });
});

